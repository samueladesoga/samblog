<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cqrs on Sam Adesoga&#39;s Personal Blog</title>
    <link>http://example.org/tags/cqrs/</link>
    <description>Recent content in Cqrs on Sam Adesoga&#39;s Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Jan 2017 13:59:12 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/cqrs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing an Asynchronous System - Part 2</title>
      <link>http://example.org/posts/testing-an-asynchronous-system-2/</link>
      <pubDate>Fri, 06 Jan 2017 13:59:12 +0000</pubDate>
      
      <guid>http://example.org/posts/testing-an-asynchronous-system-2/</guid>
      <description>In this post, I would like to consider how to write automated tests for negative scenarios for a system built using an asynchronous / event driven architecture. In my previous post, i have mentioned, that these systems are peculiar because the effect of the &amp;ldquo;write&amp;rdquo; actions are not immediately stored in the persistence layer of the application under test.
As an example, in the current system which i have been testing on the write side of the application, the write commands traverses though the Command API layer, the command controller layer and the command Handler layer before it ends up in the Event Store.</description>
    </item>
    
    <item>
      <title>Testing an Asynchronous System</title>
      <link>http://example.org/posts/testing-an-asynchronous-system/</link>
      <pubDate>Fri, 06 Jan 2017 13:13:31 +0000</pubDate>
      
      <guid>http://example.org/posts/testing-an-asynchronous-system/</guid>
      <description>In recent months i have been testing a system built using the CQRS pattern. CQRS stands for Command Query Responsibility Segregation and you can read more about it here.
As a tester, one of the key takeaway for me is that there is a Read side and a Write side to the application. This is very different to the other applications that i have tested in the past where a write operation would NOT be successfully until the data being sent to the application is successfully persisted.</description>
    </item>
    
  </channel>
</rss>